// checking 

class Solution {
  public:
    int isSumProperty(Node *root) {
        if (root == nullptr || (!root->left && !root->right)) {
            return 1; // empty or leaf node always satisfies
        }

        int child = 0;
        if (root->left)  child += root->left->data;
        if (root->right) child += root->right->data;

        if (root->data == child 
            && isSumProperty(root->left) 
            && isSumProperty(root->right)) {
            return 1;
        }

        return 0;
    }
};


////convert 


class Solution {
  public:
    void isSumProperty(Node *root) {
        if (root == nullptr) return;
        
        int child = 0;
        
        if (root->left) {
            child += root->left->data;
        }
        
        if (root->right) {
            child += root->right->data;
        }
        
        // If children sum is greater or equal, update root
        if (child >= root->data) {
            root->data = child;
        } 
        // Otherwise push root->data down to child
        else {
            if (root->left) root->left->data = root->data;
            if (root->right) root->right->data = root->data;
        }
        
        // Recurse
        isSumProperty(root->left);
        isSumProperty(root->right);
        
        // After recursion, fix root->data as sum of children
        int tot = 0;
        if (root->left) tot += root->left->data;
        if (root->right) tot += root->right->data;
        
        if (root->left || root->right) {
            root->data = tot;
        }
    }
};



